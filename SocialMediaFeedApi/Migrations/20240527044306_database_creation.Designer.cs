// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace SocialMediaFeedApi.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240527044306_database_creation")]
    partial class database_creation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Like", b =>
                {
                    b.Property<Guid>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LikeId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Like", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasColumnName("Content");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("CreatedAt");

                    b.Property<bool?>("IsLiked")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Post", (string)null);

                    b.HasData(
                        new
                        {
                            PostId = new Guid("6f7b9c0e-d769-4d6b-b170-cd80cbaa0162"),
                            Content = "Please bro!, let's keep finding the answers to these questions even if they are hard....",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 5, 27, 5, 43, 6, 511, DateTimeKind.Unspecified).AddTicks(8347), new TimeSpan(0, 1, 0, 0, 0)),
                            IsLiked = false,
                            UserId = new Guid("672b5d69-c4e1-4467-95b6-5fdfa025b220")
                        },
                        new
                        {
                            PostId = new Guid("4c84a49a-e2cf-4548-af83-206b6e51a645"),
                            Content = "That’s why we put together this list of 66!....they will surely graduate soon.",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 5, 27, 5, 43, 6, 511, DateTimeKind.Unspecified).AddTicks(8371), new TimeSpan(0, 1, 0, 0, 0)),
                            IsLiked = false,
                            UserId = new Guid("6a94ce84-5fc7-4b1d-9887-48f84986d405")
                        },
                        new
                        {
                            PostId = new Guid("b7f5c9e2-f2dd-4a63-8031-ebada7cd3696"),
                            Content = "You can use these text messages to inquire about your status.....",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 5, 27, 5, 43, 6, 511, DateTimeKind.Unspecified).AddTicks(8375), new TimeSpan(0, 1, 0, 0, 0)),
                            IsLiked = false,
                            UserId = new Guid("672b5d69-c4e1-4467-95b6-5fdfa025b220")
                        },
                        new
                        {
                            PostId = new Guid("f8fcf536-6ca7-45e1-b73c-5e8668ce785c"),
                            Content = "Yooooooooo hoooooooooooo!!......How are you doing!! .",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 5, 27, 5, 43, 6, 511, DateTimeKind.Unspecified).AddTicks(8377), new TimeSpan(0, 1, 0, 0, 0)),
                            IsLiked = false,
                            UserId = new Guid("672b5d69-c4e1-4467-95b6-5fdfa025b220")
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Username");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Website");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("672b5d69-c4e1-4467-95b6-5fdfa025b220"),
                            Email = "Oksman123@gmail.com",
                            Username = "Oksman_Ibiza",
                            Website = "https://www.oksman123.com/"
                        },
                        new
                        {
                            UserId = new Guid("6a94ce84-5fc7-4b1d-9887-48f84986d405"),
                            Email = "Manny_Bobo@gmail.com",
                            Username = "Manny_Sharpest_Guy",
                            Website = "https://www.Mani_Sholey.com/"
                        },
                        new
                        {
                            UserId = new Guid("ea8b26f5-f721-4809-8053-93a0d67dbf10"),
                            Email = "ChuksOkon@gmail.com",
                            Username = "Chukszee_518",
                            Website = "https://www.chukzee.com/"
                        });
                });

            modelBuilder.Entity("Entities.Models.UserFollowed", b =>
                {
                    b.Property<Guid>("FollowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersFollowedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FollowId");

                    b.HasIndex("UserId");

                    b.ToTable("Following", (string)null);

                    b.HasData(
                        new
                        {
                            FollowId = new Guid("ef0cbbae-e0b9-480c-9aeb-b99565e79c1a"),
                            UserId = new Guid("672b5d69-c4e1-4467-95b6-5fdfa025b220"),
                            UsersFollowedId = new Guid("6a94ce84-5fc7-4b1d-9887-48f84986d405")
                        },
                        new
                        {
                            FollowId = new Guid("b9b7d106-b1d6-4418-bc4e-ad07818c6067"),
                            UserId = new Guid("672b5d69-c4e1-4467-95b6-5fdfa025b220"),
                            UsersFollowedId = new Guid("ea8b26f5-f721-4809-8053-93a0d67dbf10")
                        });
                });

            modelBuilder.Entity("Entities.Models.Like", b =>
                {
                    b.HasOne("Entities.Models.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Post", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.UserFollowed", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("UsersFollowed")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Post", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Posts");

                    b.Navigation("UsersFollowed");
                });
#pragma warning restore 612, 618
        }
    }
}
